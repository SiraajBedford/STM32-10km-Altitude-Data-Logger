/*
 * I2C.c
 *
 *  Created on: 07 May 2019
 *  Author: User 1
 *
 *
 * Usage: https://github.com/BoschSensortec/BME280_driver
 */

#include "bme280.h"
#include "bme280_defs.h"
#include "lis2dh12_reg.h"
#include <main.h>
#include "string.h"
#include "stdlib.h"
#include "stdio.h"
#include <inttypes.h>

#include "auxilliary.h"

extern I2C_HandleTypeDef hi2c1;
#define VREFINT_CAL_ADDR ((uint16_t*)((uint32_t)0x1FFFF7BA))

int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
	HAL_I2C_Master_Transmit(&hi2c1, id<<1 ,&reg_addr, 1 , 100);
	HAL_I2C_Master_Receive(&hi2c1,(id<<1)+1,data,len,100);

	return 0;
}

void user_delay_ms(uint32_t period)
{
	HAL_Delay(period);
}

int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
	int8_t *buf;
	buf = malloc(len +1);
	buf[0] = reg_addr;
	memcpy(buf +1, data, len);
	HAL_I2C_Master_Transmit(&hi2c1 , id<<1 , (uint8_t*)buf , len+1 , 100);
	free(buf);
	return 0;
}

void print_sensor_data(struct bme280_data *comp_data)
{
#ifdef BME280_FLOAT_ENABLE
  printf("temp %0.2f, p %0.2f, hum %0.2f\r\n",comp_data->temperature, comp_data->pressure, comp_data->humidity);
#else
  printf("temp %ld, p %ld, hum %ld\r\n",comp_data->temperature, comp_data->pressure, comp_data->humidity);

#endif
}


int8_t stream_sensor_data_forced_mode(struct bme280_dev *dev)
{
  int8_t rslt;
  uint8_t settings_sel;
  struct bme280_data comp_data;

  /* Recommended mode of operation: Indoor navigation */
  dev->settings.osr_h = BME280_OVERSAMPLING_1X;
  dev->settings.osr_p = BME280_OVERSAMPLING_16X;
  dev->settings.osr_t = BME280_OVERSAMPLING_2X;
  dev->settings.filter = BME280_FILTER_COEFF_16;

  settings_sel = BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL;

  rslt = bme280_set_sensor_settings(settings_sel, dev);

  printf("Temperature, Pressure, Humidity\r\n");
  /* Continuously stream sensor data */
  while (1) {
    rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, dev);
    /* Wait for the measurement to complete and print data @25Hz */
    dev->delay_ms(40);
    rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, dev);
    printf("%f",comp_data.temperature);
  }
  return rslt;
}


int8_t stream_sensor_data_normal_mode(struct bme280_dev *dev)
{
	int8_t rslt;
	uint8_t settings_sel;
	struct bme280_data comp_data;

	/* Recommended mode of operation: Indoor navigation */
	dev->settings.osr_h = BME280_OVERSAMPLING_1X;
	dev->settings.osr_p = BME280_OVERSAMPLING_16X;
	dev->settings.osr_t = BME280_OVERSAMPLING_2X;
	dev->settings.filter = BME280_FILTER_COEFF_16;
	dev->settings.standby_time = BME280_STANDBY_TIME_62_5_MS;

	settings_sel = BME280_OSR_PRESS_SEL;
	settings_sel |= BME280_OSR_TEMP_SEL;
	settings_sel |= BME280_OSR_HUM_SEL;
	settings_sel |= BME280_STANDBY_SEL;
	settings_sel |= BME280_FILTER_SEL;
	rslt = bme280_set_sensor_settings(settings_sel, dev);
	rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, dev);

	printf("Temperature, Pressure, Humidity\r\n");
	while (1) {
		/* Delay while the sensor completes a measurement */
		dev->delay_ms(70);
		rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, dev);
		print_sensor_data(&comp_data);
	}

	return rslt;
}

//struct bme280_dev
//{
//    /*! Chip Id */
//    uint8_t chip_id;
//
//    /*! Device Id */
//    uint8_t dev_id;
//
//    /*! SPI/I2C interface */
//    enum bme280_intf intf;
//
//    /*! Read function pointer */
//    bme280_com_fptr_t read;
//
//    /*! Write function pointer */
//    bme280_com_fptr_t write;
//
//    /*! Delay function pointer */
//    bme280_delay_fptr_t delay_ms;
//
//    /*! Trim data */
//    struct bme280_calib_data calib_data;
//
//    /*! Sensor settings */
//    struct bme280_settings settings;
//};

//Use indoor mode on page 20/55

