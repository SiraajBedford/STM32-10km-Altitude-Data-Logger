/*
 * LCD.c
 *
 *  Created on: 24 Apr 2019
 *      Author: User 1
 */

/*
 * Author: S. Bedford
 *
 *
 * */

#include "stm32f3xx_it.h"
#include "auxilliary.h"
#include "main.h"
#include "string.h"
#include "stdlib.h"



#define PIN_LCD_DB4 GPIO_PIN_15
#define PIN_LCD_DB5 GPIO_PIN_14
#define PIN_LCD_DB6 GPIO_PIN_13
#define PIN_LCD_DB7 GPIO_PIN_12
#define PIN_LCD_RS GPIO_PIN_8
#define PIN_LCD_RNW GPIO_PIN_4
#define PIN_LCD_E GPIO_PIN_8

uint32_t getUs(void) {

	uint32_t usTicks = HAL_RCC_GetSysClockFreq() / 1000000;

	register uint32_t ms, cycle_cnt;
	do {
		ms = HAL_GetTick();
		cycle_cnt = SysTick->VAL;
	} while (ms != HAL_GetTick());
	return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks;
}

void delayUs(uint16_t micros) {

	uint32_t start = getUs();
	while (getUs()-start < (uint32_t) micros) {
//		asm('nop');

	}
}



void writeNibble(uint8_t dni, uint8_t nibble) {

	// read not write
	HAL_GPIO_WritePin(GPIOB, PIN_LCD_RNW, GPIO_PIN_RESET);

	// data or instruction
	if (dni) {
		HAL_GPIO_WritePin(GPIOA, PIN_LCD_RS, GPIO_PIN_SET);
	}
	else {
		HAL_GPIO_WritePin(GPIOA, PIN_LCD_RS, GPIO_PIN_RESET);
	}

	// enable
	HAL_GPIO_WritePin(GPIOC, PIN_LCD_E, GPIO_PIN_SET);

	// data
	HAL_GPIO_WritePin(GPIOB, PIN_LCD_DB7, GPIO_PIN_SET & ((nibble >> 3) & 0x1));
	HAL_GPIO_WritePin(GPIOB, PIN_LCD_DB6, GPIO_PIN_SET & ((nibble >> 2) & 0x1));
	HAL_GPIO_WritePin(GPIOB, PIN_LCD_DB5, GPIO_PIN_SET & ((nibble >> 1) & 0x1));
	HAL_GPIO_WritePin(GPIOB, PIN_LCD_DB4, GPIO_PIN_SET & ((nibble) & 0x1));


	// delay
	int i;
	for (i = 0; i < 100; i++);

	HAL_Delay(1); // ms

	// disable en pin
	HAL_GPIO_WritePin(GPIOC, PIN_LCD_E, GPIO_PIN_RESET);

	HAL_Delay(1);
}

void writeByte(uint8_t dni, uint8_t byte) {
	writeNibble(dni, byte >> 4);
	writeNibble(dni, byte);
}

void _delay(int d) {
	for(; !d; d--);
//	HAL_Delay(1);
	delayUs(d);
}

void lcdClear() {
	writeByte(0, 0x0E);
	_delay(40);
	writeByte(0, 0x01);
	_delay(1640);
	writeByte(0, 0x06);
	_delay(40);
	writeByte(0, 0x80);
	_delay(40);
}

void lcdInit() {
	// lcd init
	writeByte(0, 0x3);
	_delay(4100);
	writeByte(0, 0x3);
	_delay(100);
	writeByte(0, 0x3);
	_delay(40);
	writeByte(0, 0x2);
	_delay(40);
	writeByte(0, 0x28);
	_delay(40);

	lcdClear();

	_delay(10000);
	HAL_Delay(10);

	// test data
	//writeByte(1, 'z');

	_delay(1000);
	HAL_Delay(10);
}

void lcdPrint(char * message) {

	uint8_t len = strlen(message);
//	lcdClear();

	writeByte(0, 0x06);
	_delay(40);
	writeByte(0, 0x80);
	_delay(40);

	delayUs(100);

	volatile uint8_t i = 0;

	for (i = 0; i < len; i++)
	{
		writeByte(1, message[i]);
		if (i == 7){
			writeByte(0, 0xC0);
		}
	}
}

////UserInit() is useless so far because there are not many variables we need here and in the main.c
//void UserInitilization(){
//
//	HAL_UART_Receive_IT(&huart1, (uint8_t*)&one, 1);
//
//}
